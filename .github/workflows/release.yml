# HAOS Rock5B 发布管理工作流
name: Release Management

# 手动触发参数
on:
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号'
        required: true
        default: ''
      prerelease:
        description: '是否为预发布版本'
        type: boolean
        required: false
        default: false

jobs:
  prepare-release:
    runs-on: ubuntu-latest  # 使用最新Ubuntu运行器
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整提交历史

      - name: 设置环境
        run: |
          # 设置中国时区
          sudo timedatectl set-timezone "Asia/Shanghai"
          
          # 设置环境变量
          echo "RELEASE_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: 生成更新日志
        id: changelog
        run: |
          # 获取上一个标签
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # 生成变更日志
          if [ -z "$PREV_TAG" ]; then
            # 首次发布，获取所有提交
            CHANGES=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            # 获取从上个标签到现在的提交
            CHANGES=$(git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges)
          fi
          
          # 生成更新日志文件
          echo "# 更新日志 (${{ env.RELEASE_DATE }})" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## 版本 ${{ env.VERSION }}" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$CHANGES" >> CHANGELOG.md
          
          # 为GitHub Actions设置输出
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "changelog<<$EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: 创建Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 更新版本文件
        run: |
          # 更新版本文件
          echo "${{ env.VERSION }}" > VERSION
          
          # 提交版本更新
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add VERSION
          git commit -m "chore: bump version to ${{ env.VERSION }}"
          git push

      - name: 触发构建
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: trigger-build
          client-payload: '{"version": "${{ env.VERSION }}"}'

  notify:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - name: 发送通知
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const release_url = `https://github.com/${owner}/${repo}/releases/tag/v${{ env.VERSION }}`;
            
            // 发布通知消息
            const message = `
            🎉 新版本发布通知
            
            版本: v${{ env.VERSION }}
            发布日期: ${{ env.RELEASE_DATE }}
            
            查看发布详情: ${release_url}
            `;
            
            // 创建Issue通知
            await github.rest.issues.create({
              owner,
              repo,
              title: `Release v${{ env.VERSION }} 已发布`,
              body: message,
              labels: ['release']
            });